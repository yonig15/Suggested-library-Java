pipeline {
    agent any
    environment {
        projectName = 'analytics' 
        emailAddress = "tadir.uk@gmail.com" 
        mavenSetting = "maven_setting" 
   }

    tools{
        maven 'maven-3.6.2'
        jdk   'JDK JAVA HOME8'
    }

    stages{
        stage("preparing workspace"){
            steps{
                deleteDir()
                checkout scm
                script {
                    env.GIT_COMMIT_MSG=sh(script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
                }
            }
        }


        stage("Get tag & version"){
            when {
                expression {env.BRANCH_NAME.startsWith('release/')}
            }
            steps{
                git branch: env.BRANCH_NAME, credentialsId: 'gitlab_ssh', url: "git@gitlab_container:bialekamir/${projectName}"
                script{
                    major_version=sh(script: "echo ${env.BRANCH_NAME} | grep -Eo '[0-9]{1,24}' | head -n1", returnStdout: true).trim()
                    minor_version=sh(script: "echo ${env.BRANCH_NAME} | grep -Eo '[0-9]{1,24}' | tail -n1", returnStdout: true).trim()
                    current_tag=sh(script: "git tag |  grep -Eo '[0-9]{1,24}' | tail -n 1 ", returnStdout: true).trim()
                    if ("${current_tag}" == '') {
                        echo "no Tags, will give a tag of ${major_version}.${minor_version}.1 now"
                        new_tag="${major_version}.${minor_version}.1"
                    } else {
                        current_tag_plusOne=plusOne(current_tag)
                        new_tag="${major_version}.${minor_version}.${current_tag_plusOne}"
                    }
                }
                checkout scm
            }            
        }


        stage("build and unit testing"){
            when {
                expression {
                env.BRANCH_NAME.startsWith('feature/') ||  env.BRANCH_NAME.startsWith('main') || env.BRANCH_NAME.startsWith('release/') 
                }
            }
            steps{
               withMaven(
                    maven: 'maven-3.6.2', 
                    mavenSettingsConfig: "${mavenSetting}" ) {
                            sh "mvn package"
                    }
            }
        }

        stage("E2E Tests"){
            when {
                anyOf{  
                    allOf{
                        expression {env.BRANCH_NAME.startsWith('feature/')}
                        expression {env.GIT_COMMIT_MSG.contains('#e2e')}
                    }
                    expression {   env.BRANCH_NAME.startsWith('main') || env.BRANCH_NAME.startsWith('release/') }
                }
            }
                steps {
                    configFileProvider([configFile(fileId: 'maven_setting', variable: 'MAVEN_SETTINGS')]) {
                        sh """
                        mvn  -s "$MAVEN_SETTINGS" -DgroupId=com.lidar -DartifactId=analytics -Dversion=99-SNAPSHOT dependency:get
                        mvn -Dartifact=com.lidar:analytics:99-SNAPSHOT -DoutputDirectory=./ dependency:copy

                        mvn  -s "$MAVEN_SETTINGS" -DgroupId=com.lidar -DartifactId=simulator -Dversion=99-SNAPSHOT dependency:get
                        mvn -Dartifact=com.lidar:simulator:99-SNAPSHOT -DoutputDirectory=./ dependency:copy

                        mvn  -s "$MAVEN_SETTINGS" -DgroupId=com.lidar -DartifactId=telemetry -Dversion=99-SNAPSHOT dependency:get
                        mvn -Dartifact=com.lidar:telemetry:99-SNAPSHOT -DoutputDirectory=./ dependency:copy
                        
                        java -cp analytics-99-SNAPSHOT.jar:simulator-99-SNAPSHOT.jar:telemetry-99-SNAPSHOT.jar:./target/analytics-99-SNAPSHOT.jar com.lidar.simulation.Simulator"""
                    }

                // withMaven(
                //     maven: 'maven-3.6.2', 
                //     mavenSettingsConfig: "${mavenSetting}" ) {
                //         sh """
                //         curl http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/simulator-99-SNAPSHOT.jar -o simulator.jar
                //         curl http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/telemetry-99-SNAPSHOT.jar -o telemetry.jar
                //         curl http://artifactory:8081/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/analytics-99-SNAPSHOT.jar -o analytics.jar
                //         java -cp analytics-99-SNAPSHOT.jar:simulator-99-SNAPSHOT.jar:telemetry-99-SNAPSHOT.jar:./target/analytics-99-SNAPSHOT.jar com.lidar.simulation.Simulator
                //         """
                
                //     }
                }
        }

        stage("publish"){
            when {
                expression {
                    env.BRANCH_NAME.startsWith('main') || env.BRANCH_NAME.startsWith('release/')
                }
            }
            steps{
                script{
                withMaven(
                    maven: 'maven-3.6.2', 
                    mavenSettingsConfig: "${mavenSetting}" )
                    {
                        if (env.BRANCH_NAME.startsWith('main')) {
                            sh "mvn deploy -DskipTests"
                            }

                        else {
                            sh """mvn versions:set -DnewVersion=${new_tag} 
                            mvn dependency:list
                            mvn deploy -DskipTests"""
                            }
                    
                    }
                }
            }

        stage("push tag"){
            when {
                expression { env.BRANCH_NAME.startsWith('release/') }
            }

            steps{
                git branch: env.BRANCH_NAME, credentialsId: 'gitlab_ssh', url: "git@gitlab_container:bialekamir/${projectName}"
                sh """git tag ${new_tag} 
                git push --tag""" 
            }
        }
    }

    post{
        always{
            deleteDir()
        }

        failure {
            echo "sorry, something did not work :( "
                mail body: "<b>failure :(</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL: ${env.BUILD_URL}", charset: 'UTF-8', mimeType: 'text/html', subject: "error CI: Project name -> ${env.JOB_NAME}", to: "${emailAddress}"
        }
        success {
            echo "well done, all good :)"
            mail body: "<b>success :)</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL: ${env.BUILD_URL}", charset: 'UTF-8', mimeType: 'text/html', subject: "success CI: Project name -> ${env.JOB_NAME}", to: "${emailAddress}"

        }
    }
    
}

int plusOne(String current_version){
    int new_version=Integer.parseInt(current_version)+1
    return new_version
}
}






pipeline {
    agent any
    
    tools {
        maven 'maven-3.6.2' 
    }
    stages {
        stage('Calculate & Set Version') {
            when {
                branch 'release/*'
            }
            steps {
                script {
                    def branchName = env.BRANCH_NAME
                    def version = branchName.split('/')[1]
                    def pom = readMavenPom file: 'pom.xml'
                    def newVersion = "${pom.version}.${version}"
                    sh "mvn versions:set -DnewVersion=${newVersion}"
                    sh "git commit -m 'Update version to ${newVersion}' pom.xml"
                    sh "git push"
                }
            }
        }
        stage('Calculate & Set Version') {
      echo "------------------branch: ${env.BRANCH_NAME}"
      if (env.BRANCH_NAME =~ /^release\/.*$/) {
        def branchName = env.BRANCH_NAME
        def version = branchName.substring(branchName.lastIndexOf('/') + 1)
        sh "mvn versions:set -DnewVersion=${version}"      
        withCredentials([gitUsernamePassword(credentialsId: 'github tokenpass', gitToolName: 'Default')]) {
          sh "git add ."
          sh "git commit -m 'Bump version to ${version}'" 
          sh "git push --force-with-lease origin HEAD:${env.BRANCH_NAME}"
        }         
      }
    }
        stage('Build & Test') {
            steps {
                sh "mvn clean test"
            }
        }
    }
    post {
        success {
            slackSend color: '#36a64f', message: "Build succeeded!",
                attachments: [
                    [
                        color: '#36a64f',
                        fallback: 'Build succeeded!',
                        title: 'Build Status',
                        text: 'Build succeeded!'
                    ]
                ]
        }
        failure {
            slackSend color: '#ff0000', message: "Build failed!",
                attachments: [
                    [
                        color: '#ff0000',
                        fallback: 'Build failed!',
                        title: 'Build Status',
                        text: 'Build failed!'
                    ]
                ]
        }
        always {
            sh "mvn checkstyle:checkstyle"
            checkstyle pattern: 'target/checkstyle-result.xml'
        }
    }
}



pipeline {
    agent any
    
    tools {
        maven 'maven-3.6.2' 
    }
    
    stages {
        stage('Bump Version') {
            steps {
                echo "------------------branch: ${env.BRANCH_NAME}"
                script {
                    if (env.BRANCH_NAME =~ /^release\/.*$/) {
                        def branchName = env.BRANCH_NAME
                        def version = branchName.substring(branchName.lastIndexOf('/') + 1)
                        sh "mvn versions:set -DnewVersion=${version}"      
                        withCredentials([gitUsernamePassword(credentialsId: 'github tokenpass', gitToolName: 'Default')]) {
                            sh "git add ."
                            sh "git commit -m 'Bump version to ${version}'" 
                            sh "git push --force-with-lease origin HEAD:${env.BRANCH_NAME}"
                        }         
                    }
                }
            }
        }
        
        stage('Build & Test') {
            steps {
                sh "mvn clean test"
            }
        }
    }
    
    post {
        success {
            slackSend color: '#36a64f', message: "Build succeeded!",
                attachments: [
                    [
                        color: '#36a64f',
                        fallback: 'Build succeeded!',
                        title: 'Build Status',
                        text: 'Build succeeded!'
                    ]
                ]
        }
        
        failure {
            slackSend color: '#ff0000', message: "Build failed!",
                attachments: [
                    [
                        color: '#ff0000',
                        fallback: 'Build failed!',
                        title: 'Build Status',
                        text: 'Build failed!'
                    ]
                ]
        }
        
        always {
            sh "mvn checkstyle:checkstyle"
            checkstyle pattern: 'target/checkstyle-result.xml'
        }
    }
}
